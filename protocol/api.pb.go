// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api.proto

package protocol

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type QueryPeersRes_PeerState int32

const (
	QueryPeersRes_CONNECTED QueryPeersRes_PeerState = 0
	QueryPeersRes_STORED    QueryPeersRes_PeerState = 1
	QueryPeersRes_BANNED    QueryPeersRes_PeerState = 2
)

var QueryPeersRes_PeerState_name = map[int32]string{
	0: "CONNECTED",
	1: "STORED",
	2: "BANNED",
}

var QueryPeersRes_PeerState_value = map[string]int32{
	"CONNECTED": 0,
	"STORED":    1,
	"BANNED":    2,
}

func (x QueryPeersRes_PeerState) String() string {
	return proto.EnumName(QueryPeersRes_PeerState_name, int32(x))
}

func (QueryPeersRes_PeerState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{8, 0}
}

type GetStatusRes struct {
	PeerID               []byte   `protobuf:"bytes,1,opt,name=peerID,proto3" json:"peerID,omitempty"`
	PeerCount            int32    `protobuf:"varint,2,opt,name=peerCount,proto3" json:"peerCount,omitempty"`
	BytesTx              uint64   `protobuf:"varint,3,opt,name=bytesTx,proto3" json:"bytesTx,omitempty"`
	BytesRx              uint64   `protobuf:"varint,4,opt,name=bytesRx,proto3" json:"bytesRx,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetStatusRes) Reset()         { *m = GetStatusRes{} }
func (m *GetStatusRes) String() string { return proto.CompactTextString(m) }
func (*GetStatusRes) ProtoMessage()    {}
func (*GetStatusRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

func (m *GetStatusRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetStatusRes.Unmarshal(m, b)
}
func (m *GetStatusRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetStatusRes.Marshal(b, m, deterministic)
}
func (m *GetStatusRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetStatusRes.Merge(m, src)
}
func (m *GetStatusRes) XXX_Size() int {
	return xxx_messageInfo_GetStatusRes.Size(m)
}
func (m *GetStatusRes) XXX_DiscardUnknown() {
	xxx_messageInfo_GetStatusRes.DiscardUnknown(m)
}

var xxx_messageInfo_GetStatusRes proto.InternalMessageInfo

func (m *GetStatusRes) GetPeerID() []byte {
	if m != nil {
		return m.PeerID
	}
	return nil
}

func (m *GetStatusRes) GetPeerCount() int32 {
	if m != nil {
		return m.PeerCount
	}
	return 0
}

func (m *GetStatusRes) GetBytesTx() uint64 {
	if m != nil {
		return m.BytesTx
	}
	return 0
}

func (m *GetStatusRes) GetBytesRx() uint64 {
	if m != nil {
		return m.BytesRx
	}
	return 0
}

type GetConfigRes struct {
	Value                []byte   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetConfigRes) Reset()         { *m = GetConfigRes{} }
func (m *GetConfigRes) String() string { return proto.CompactTextString(m) }
func (*GetConfigRes) ProtoMessage()    {}
func (*GetConfigRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

func (m *GetConfigRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetConfigRes.Unmarshal(m, b)
}
func (m *GetConfigRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetConfigRes.Marshal(b, m, deterministic)
}
func (m *GetConfigRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetConfigRes.Merge(m, src)
}
func (m *GetConfigRes) XXX_Size() int {
	return xxx_messageInfo_GetConfigRes.Size(m)
}
func (m *GetConfigRes) XXX_DiscardUnknown() {
	xxx_messageInfo_GetConfigRes.DiscardUnknown(m)
}

var xxx_messageInfo_GetConfigRes proto.InternalMessageInfo

func (m *GetConfigRes) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type GetNamesReq struct {
	Start                string   `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	Count                uint32   `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetNamesReq) Reset()         { *m = GetNamesReq{} }
func (m *GetNamesReq) String() string { return proto.CompactTextString(m) }
func (*GetNamesReq) ProtoMessage()    {}
func (*GetNamesReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}

func (m *GetNamesReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetNamesReq.Unmarshal(m, b)
}
func (m *GetNamesReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetNamesReq.Marshal(b, m, deterministic)
}
func (m *GetNamesReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNamesReq.Merge(m, src)
}
func (m *GetNamesReq) XXX_Size() int {
	return xxx_messageInfo_GetNamesReq.Size(m)
}
func (m *GetNamesReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNamesReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetNamesReq proto.InternalMessageInfo

func (m *GetNamesReq) GetStart() string {
	if m != nil {
		return m.Start
	}
	return ""
}

func (m *GetNamesReq) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type GetNamesRes struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PublicKey            []byte   `protobuf:"bytes,2,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetNamesRes) Reset()         { *m = GetNamesRes{} }
func (m *GetNamesRes) String() string { return proto.CompactTextString(m) }
func (*GetNamesRes) ProtoMessage()    {}
func (*GetNamesRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}

func (m *GetNamesRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetNamesRes.Unmarshal(m, b)
}
func (m *GetNamesRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetNamesRes.Marshal(b, m, deterministic)
}
func (m *GetNamesRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetNamesRes.Merge(m, src)
}
func (m *GetNamesRes) XXX_Size() int {
	return xxx_messageInfo_GetNamesRes.Size(m)
}
func (m *GetNamesRes) XXX_DiscardUnknown() {
	xxx_messageInfo_GetNamesRes.DiscardUnknown(m)
}

var xxx_messageInfo_GetNamesRes proto.InternalMessageInfo

func (m *GetNamesRes) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetNamesRes) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

type AddPeerReq struct {
	PeerID               []byte   `protobuf:"bytes,1,opt,name=peerID,proto3" json:"peerID,omitempty"`
	Addr                 string   `protobuf:"bytes,2,opt,name=addr,proto3" json:"addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddPeerReq) Reset()         { *m = AddPeerReq{} }
func (m *AddPeerReq) String() string { return proto.CompactTextString(m) }
func (*AddPeerReq) ProtoMessage()    {}
func (*AddPeerReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{4}
}

func (m *AddPeerReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddPeerReq.Unmarshal(m, b)
}
func (m *AddPeerReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddPeerReq.Marshal(b, m, deterministic)
}
func (m *AddPeerReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPeerReq.Merge(m, src)
}
func (m *AddPeerReq) XXX_Size() int {
	return xxx_messageInfo_AddPeerReq.Size(m)
}
func (m *AddPeerReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPeerReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddPeerReq proto.InternalMessageInfo

func (m *AddPeerReq) GetPeerID() []byte {
	if m != nil {
		return m.PeerID
	}
	return nil
}

func (m *AddPeerReq) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type UnbanPeerReq struct {
	Ip                   []byte   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnbanPeerReq) Reset()         { *m = UnbanPeerReq{} }
func (m *UnbanPeerReq) String() string { return proto.CompactTextString(m) }
func (*UnbanPeerReq) ProtoMessage()    {}
func (*UnbanPeerReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{5}
}

func (m *UnbanPeerReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnbanPeerReq.Unmarshal(m, b)
}
func (m *UnbanPeerReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnbanPeerReq.Marshal(b, m, deterministic)
}
func (m *UnbanPeerReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnbanPeerReq.Merge(m, src)
}
func (m *UnbanPeerReq) XXX_Size() int {
	return xxx_messageInfo_UnbanPeerReq.Size(m)
}
func (m *UnbanPeerReq) XXX_DiscardUnknown() {
	xxx_messageInfo_UnbanPeerReq.DiscardUnknown(m)
}

var xxx_messageInfo_UnbanPeerReq proto.InternalMessageInfo

func (m *UnbanPeerReq) GetIp() []byte {
	if m != nil {
		return m.Ip
	}
	return nil
}

type BanPeerReq struct {
	Ip                   []byte   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	DurationMS           int64    `protobuf:"varint,2,opt,name=durationMS,proto3" json:"durationMS,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BanPeerReq) Reset()         { *m = BanPeerReq{} }
func (m *BanPeerReq) String() string { return proto.CompactTextString(m) }
func (*BanPeerReq) ProtoMessage()    {}
func (*BanPeerReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{6}
}

func (m *BanPeerReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BanPeerReq.Unmarshal(m, b)
}
func (m *BanPeerReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BanPeerReq.Marshal(b, m, deterministic)
}
func (m *BanPeerReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BanPeerReq.Merge(m, src)
}
func (m *BanPeerReq) XXX_Size() int {
	return xxx_messageInfo_BanPeerReq.Size(m)
}
func (m *BanPeerReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BanPeerReq.DiscardUnknown(m)
}

var xxx_messageInfo_BanPeerReq proto.InternalMessageInfo

func (m *BanPeerReq) GetIp() []byte {
	if m != nil {
		return m.Ip
	}
	return nil
}

func (m *BanPeerReq) GetDurationMS() int64 {
	if m != nil {
		return m.DurationMS
	}
	return 0
}

type QueryPeersReq struct {
	IncludeConnected     bool     `protobuf:"varint,1,opt,name=includeConnected,proto3" json:"includeConnected,omitempty"`
	IncludeStored        bool     `protobuf:"varint,2,opt,name=includeStored,proto3" json:"includeStored,omitempty"`
	IncludeBanned        bool     `protobuf:"varint,3,opt,name=includeBanned,proto3" json:"includeBanned,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryPeersReq) Reset()         { *m = QueryPeersReq{} }
func (m *QueryPeersReq) String() string { return proto.CompactTextString(m) }
func (*QueryPeersReq) ProtoMessage()    {}
func (*QueryPeersReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{7}
}

func (m *QueryPeersReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryPeersReq.Unmarshal(m, b)
}
func (m *QueryPeersReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryPeersReq.Marshal(b, m, deterministic)
}
func (m *QueryPeersReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPeersReq.Merge(m, src)
}
func (m *QueryPeersReq) XXX_Size() int {
	return xxx_messageInfo_QueryPeersReq.Size(m)
}
func (m *QueryPeersReq) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPeersReq.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPeersReq proto.InternalMessageInfo

func (m *QueryPeersReq) GetIncludeConnected() bool {
	if m != nil {
		return m.IncludeConnected
	}
	return false
}

func (m *QueryPeersReq) GetIncludeStored() bool {
	if m != nil {
		return m.IncludeStored
	}
	return false
}

func (m *QueryPeersReq) GetIncludeBanned() bool {
	if m != nil {
		return m.IncludeBanned
	}
	return false
}

type QueryPeersRes struct {
	PeerID               []byte                  `protobuf:"bytes,1,opt,name=peerID,proto3" json:"peerID,omitempty"`
	Ip                   []byte                  `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Port                 uint32                  `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	State                QueryPeersRes_PeerState `protobuf:"varint,4,opt,name=state,proto3,enum=QueryPeersRes_PeerState" json:"state,omitempty"`
	Banned               bool                    `protobuf:"varint,5,opt,name=banned,proto3" json:"banned,omitempty"`
	RecvBytes            uint64                  `protobuf:"varint,6,opt,name=recvBytes,proto3" json:"recvBytes,omitempty"`
	SentBytes            uint64                  `protobuf:"varint,7,opt,name=sentBytes,proto3" json:"sentBytes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                `json:"-"`
	XXX_unrecognized     []byte                  `json:"-"`
	XXX_sizecache        int32                   `json:"-"`
}

func (m *QueryPeersRes) Reset()         { *m = QueryPeersRes{} }
func (m *QueryPeersRes) String() string { return proto.CompactTextString(m) }
func (*QueryPeersRes) ProtoMessage()    {}
func (*QueryPeersRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{8}
}

func (m *QueryPeersRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryPeersRes.Unmarshal(m, b)
}
func (m *QueryPeersRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryPeersRes.Marshal(b, m, deterministic)
}
func (m *QueryPeersRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPeersRes.Merge(m, src)
}
func (m *QueryPeersRes) XXX_Size() int {
	return xxx_messageInfo_QueryPeersRes.Size(m)
}
func (m *QueryPeersRes) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPeersRes.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPeersRes proto.InternalMessageInfo

func (m *QueryPeersRes) GetPeerID() []byte {
	if m != nil {
		return m.PeerID
	}
	return nil
}

func (m *QueryPeersRes) GetIp() []byte {
	if m != nil {
		return m.Ip
	}
	return nil
}

func (m *QueryPeersRes) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *QueryPeersRes) GetState() QueryPeersRes_PeerState {
	if m != nil {
		return m.State
	}
	return QueryPeersRes_CONNECTED
}

func (m *QueryPeersRes) GetBanned() bool {
	if m != nil {
		return m.Banned
	}
	return false
}

func (m *QueryPeersRes) GetRecvBytes() uint64 {
	if m != nil {
		return m.RecvBytes
	}
	return 0
}

func (m *QueryPeersRes) GetSentBytes() uint64 {
	if m != nil {
		return m.SentBytes
	}
	return 0
}

type CheckoutReq struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckoutReq) Reset()         { *m = CheckoutReq{} }
func (m *CheckoutReq) String() string { return proto.CompactTextString(m) }
func (*CheckoutReq) ProtoMessage()    {}
func (*CheckoutReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{9}
}

func (m *CheckoutReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckoutReq.Unmarshal(m, b)
}
func (m *CheckoutReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckoutReq.Marshal(b, m, deterministic)
}
func (m *CheckoutReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckoutReq.Merge(m, src)
}
func (m *CheckoutReq) XXX_Size() int {
	return xxx_messageInfo_CheckoutReq.Size(m)
}
func (m *CheckoutReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckoutReq.DiscardUnknown(m)
}

var xxx_messageInfo_CheckoutReq proto.InternalMessageInfo

func (m *CheckoutReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type CheckoutRes struct {
	TxID                 uint32   `protobuf:"varint,1,opt,name=txID,proto3" json:"txID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CheckoutRes) Reset()         { *m = CheckoutRes{} }
func (m *CheckoutRes) String() string { return proto.CompactTextString(m) }
func (*CheckoutRes) ProtoMessage()    {}
func (*CheckoutRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{10}
}

func (m *CheckoutRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckoutRes.Unmarshal(m, b)
}
func (m *CheckoutRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckoutRes.Marshal(b, m, deterministic)
}
func (m *CheckoutRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckoutRes.Merge(m, src)
}
func (m *CheckoutRes) XXX_Size() int {
	return xxx_messageInfo_CheckoutRes.Size(m)
}
func (m *CheckoutRes) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckoutRes.DiscardUnknown(m)
}

var xxx_messageInfo_CheckoutRes proto.InternalMessageInfo

func (m *CheckoutRes) GetTxID() uint32 {
	if m != nil {
		return m.TxID
	}
	return 0
}

type WriteReq struct {
	TxID                 uint32   `protobuf:"varint,1,opt,name=txID,proto3" json:"txID,omitempty"`
	Offset               uint32   `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Data                 []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WriteReq) Reset()         { *m = WriteReq{} }
func (m *WriteReq) String() string { return proto.CompactTextString(m) }
func (*WriteReq) ProtoMessage()    {}
func (*WriteReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{11}
}

func (m *WriteReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WriteReq.Unmarshal(m, b)
}
func (m *WriteReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WriteReq.Marshal(b, m, deterministic)
}
func (m *WriteReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteReq.Merge(m, src)
}
func (m *WriteReq) XXX_Size() int {
	return xxx_messageInfo_WriteReq.Size(m)
}
func (m *WriteReq) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteReq.DiscardUnknown(m)
}

var xxx_messageInfo_WriteReq proto.InternalMessageInfo

func (m *WriteReq) GetTxID() uint32 {
	if m != nil {
		return m.TxID
	}
	return 0
}

func (m *WriteReq) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *WriteReq) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type TruncateReq struct {
	TxID                 uint32   `protobuf:"varint,1,opt,name=txID,proto3" json:"txID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TruncateReq) Reset()         { *m = TruncateReq{} }
func (m *TruncateReq) String() string { return proto.CompactTextString(m) }
func (*TruncateReq) ProtoMessage()    {}
func (*TruncateReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{12}
}

func (m *TruncateReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TruncateReq.Unmarshal(m, b)
}
func (m *TruncateReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TruncateReq.Marshal(b, m, deterministic)
}
func (m *TruncateReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TruncateReq.Merge(m, src)
}
func (m *TruncateReq) XXX_Size() int {
	return xxx_messageInfo_TruncateReq.Size(m)
}
func (m *TruncateReq) XXX_DiscardUnknown() {
	xxx_messageInfo_TruncateReq.DiscardUnknown(m)
}

var xxx_messageInfo_TruncateReq proto.InternalMessageInfo

func (m *TruncateReq) GetTxID() uint32 {
	if m != nil {
		return m.TxID
	}
	return 0
}

type TruncateRes struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TruncateRes) Reset()         { *m = TruncateRes{} }
func (m *TruncateRes) String() string { return proto.CompactTextString(m) }
func (*TruncateRes) ProtoMessage()    {}
func (*TruncateRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{13}
}

func (m *TruncateRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TruncateRes.Unmarshal(m, b)
}
func (m *TruncateRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TruncateRes.Marshal(b, m, deterministic)
}
func (m *TruncateRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TruncateRes.Merge(m, src)
}
func (m *TruncateRes) XXX_Size() int {
	return xxx_messageInfo_TruncateRes.Size(m)
}
func (m *TruncateRes) XXX_DiscardUnknown() {
	xxx_messageInfo_TruncateRes.DiscardUnknown(m)
}

var xxx_messageInfo_TruncateRes proto.InternalMessageInfo

type PreCommitReq struct {
	TxID                 uint32   `protobuf:"varint,1,opt,name=txID,proto3" json:"txID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PreCommitReq) Reset()         { *m = PreCommitReq{} }
func (m *PreCommitReq) String() string { return proto.CompactTextString(m) }
func (*PreCommitReq) ProtoMessage()    {}
func (*PreCommitReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{14}
}

func (m *PreCommitReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PreCommitReq.Unmarshal(m, b)
}
func (m *PreCommitReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PreCommitReq.Marshal(b, m, deterministic)
}
func (m *PreCommitReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreCommitReq.Merge(m, src)
}
func (m *PreCommitReq) XXX_Size() int {
	return xxx_messageInfo_PreCommitReq.Size(m)
}
func (m *PreCommitReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PreCommitReq.DiscardUnknown(m)
}

var xxx_messageInfo_PreCommitReq proto.InternalMessageInfo

func (m *PreCommitReq) GetTxID() uint32 {
	if m != nil {
		return m.TxID
	}
	return 0
}

type PreCommitRes struct {
	MerkleRoot           []byte   `protobuf:"bytes,1,opt,name=merkleRoot,proto3" json:"merkleRoot,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PreCommitRes) Reset()         { *m = PreCommitRes{} }
func (m *PreCommitRes) String() string { return proto.CompactTextString(m) }
func (*PreCommitRes) ProtoMessage()    {}
func (*PreCommitRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{15}
}

func (m *PreCommitRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PreCommitRes.Unmarshal(m, b)
}
func (m *PreCommitRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PreCommitRes.Marshal(b, m, deterministic)
}
func (m *PreCommitRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreCommitRes.Merge(m, src)
}
func (m *PreCommitRes) XXX_Size() int {
	return xxx_messageInfo_PreCommitRes.Size(m)
}
func (m *PreCommitRes) XXX_DiscardUnknown() {
	xxx_messageInfo_PreCommitRes.DiscardUnknown(m)
}

var xxx_messageInfo_PreCommitRes proto.InternalMessageInfo

func (m *PreCommitRes) GetMerkleRoot() []byte {
	if m != nil {
		return m.MerkleRoot
	}
	return nil
}

type CommitReq struct {
	TxID                 uint32   `protobuf:"varint,1,opt,name=txID,proto3" json:"txID,omitempty"`
	Timestamp            uint64   `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Signature            []byte   `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	Broadcast            bool     `protobuf:"varint,4,opt,name=broadcast,proto3" json:"broadcast,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommitReq) Reset()         { *m = CommitReq{} }
func (m *CommitReq) String() string { return proto.CompactTextString(m) }
func (*CommitReq) ProtoMessage()    {}
func (*CommitReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{16}
}

func (m *CommitReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitReq.Unmarshal(m, b)
}
func (m *CommitReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitReq.Marshal(b, m, deterministic)
}
func (m *CommitReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitReq.Merge(m, src)
}
func (m *CommitReq) XXX_Size() int {
	return xxx_messageInfo_CommitReq.Size(m)
}
func (m *CommitReq) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitReq.DiscardUnknown(m)
}

var xxx_messageInfo_CommitReq proto.InternalMessageInfo

func (m *CommitReq) GetTxID() uint32 {
	if m != nil {
		return m.TxID
	}
	return 0
}

func (m *CommitReq) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *CommitReq) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func (m *CommitReq) GetBroadcast() bool {
	if m != nil {
		return m.Broadcast
	}
	return false
}

type CommitRes struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommitRes) Reset()         { *m = CommitRes{} }
func (m *CommitRes) String() string { return proto.CompactTextString(m) }
func (*CommitRes) ProtoMessage()    {}
func (*CommitRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{17}
}

func (m *CommitRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitRes.Unmarshal(m, b)
}
func (m *CommitRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitRes.Marshal(b, m, deterministic)
}
func (m *CommitRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitRes.Merge(m, src)
}
func (m *CommitRes) XXX_Size() int {
	return xxx_messageInfo_CommitRes.Size(m)
}
func (m *CommitRes) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitRes.DiscardUnknown(m)
}

var xxx_messageInfo_CommitRes proto.InternalMessageInfo

type ReadReq struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadReq) Reset()         { *m = ReadReq{} }
func (m *ReadReq) String() string { return proto.CompactTextString(m) }
func (*ReadReq) ProtoMessage()    {}
func (*ReadReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{18}
}

func (m *ReadReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadReq.Unmarshal(m, b)
}
func (m *ReadReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadReq.Marshal(b, m, deterministic)
}
func (m *ReadReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadReq.Merge(m, src)
}
func (m *ReadReq) XXX_Size() int {
	return xxx_messageInfo_ReadReq.Size(m)
}
func (m *ReadReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadReq.DiscardUnknown(m)
}

var xxx_messageInfo_ReadReq proto.InternalMessageInfo

func (m *ReadReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type ReadRes struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadRes) Reset()         { *m = ReadRes{} }
func (m *ReadRes) String() string { return proto.CompactTextString(m) }
func (*ReadRes) ProtoMessage()    {}
func (*ReadRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{19}
}

func (m *ReadRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadRes.Unmarshal(m, b)
}
func (m *ReadRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadRes.Marshal(b, m, deterministic)
}
func (m *ReadRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadRes.Merge(m, src)
}
func (m *ReadRes) XXX_Size() int {
	return xxx_messageInfo_ReadRes.Size(m)
}
func (m *ReadRes) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadRes.DiscardUnknown(m)
}

var xxx_messageInfo_ReadRes proto.InternalMessageInfo

func (m *ReadRes) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type ReadAtReq struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Offset               uint32   `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Len                  uint32   `protobuf:"varint,3,opt,name=len,proto3" json:"len,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadAtReq) Reset()         { *m = ReadAtReq{} }
func (m *ReadAtReq) String() string { return proto.CompactTextString(m) }
func (*ReadAtReq) ProtoMessage()    {}
func (*ReadAtReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{20}
}

func (m *ReadAtReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadAtReq.Unmarshal(m, b)
}
func (m *ReadAtReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadAtReq.Marshal(b, m, deterministic)
}
func (m *ReadAtReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadAtReq.Merge(m, src)
}
func (m *ReadAtReq) XXX_Size() int {
	return xxx_messageInfo_ReadAtReq.Size(m)
}
func (m *ReadAtReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadAtReq.DiscardUnknown(m)
}

var xxx_messageInfo_ReadAtReq proto.InternalMessageInfo

func (m *ReadAtReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ReadAtReq) GetOffset() uint32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ReadAtReq) GetLen() uint32 {
	if m != nil {
		return m.Len
	}
	return 0
}

type ReadAtRes struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadAtRes) Reset()         { *m = ReadAtRes{} }
func (m *ReadAtRes) String() string { return proto.CompactTextString(m) }
func (*ReadAtRes) ProtoMessage()    {}
func (*ReadAtRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{21}
}

func (m *ReadAtRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadAtRes.Unmarshal(m, b)
}
func (m *ReadAtRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadAtRes.Marshal(b, m, deterministic)
}
func (m *ReadAtRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadAtRes.Merge(m, src)
}
func (m *ReadAtRes) XXX_Size() int {
	return xxx_messageInfo_ReadAtRes.Size(m)
}
func (m *ReadAtRes) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadAtRes.DiscardUnknown(m)
}

var xxx_messageInfo_ReadAtRes proto.InternalMessageInfo

func (m *ReadAtRes) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type BlobInfoReq struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlobInfoReq) Reset()         { *m = BlobInfoReq{} }
func (m *BlobInfoReq) String() string { return proto.CompactTextString(m) }
func (*BlobInfoReq) ProtoMessage()    {}
func (*BlobInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{22}
}

func (m *BlobInfoReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlobInfoReq.Unmarshal(m, b)
}
func (m *BlobInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlobInfoReq.Marshal(b, m, deterministic)
}
func (m *BlobInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlobInfoReq.Merge(m, src)
}
func (m *BlobInfoReq) XXX_Size() int {
	return xxx_messageInfo_BlobInfoReq.Size(m)
}
func (m *BlobInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_BlobInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_BlobInfoReq proto.InternalMessageInfo

func (m *BlobInfoReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type BlobInfoRes struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	PublicKey            []byte   `protobuf:"bytes,2,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	ImportHeight         uint32   `protobuf:"varint,3,opt,name=importHeight,proto3" json:"importHeight,omitempty"`
	HasBlob              bool     `protobuf:"varint,4,opt,name=hasBlob,proto3" json:"hasBlob,omitempty"`
	Timestamp            uint64   `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	MerkleRoot           []byte   `protobuf:"bytes,6,opt,name=merkleRoot,proto3" json:"merkleRoot,omitempty"`
	ReservedRoot         []byte   `protobuf:"bytes,7,opt,name=reservedRoot,proto3" json:"reservedRoot,omitempty"`
	ReceivedAt           uint64   `protobuf:"varint,8,opt,name=receivedAt,proto3" json:"receivedAt,omitempty"`
	Signature            []byte   `protobuf:"bytes,9,opt,name=signature,proto3" json:"signature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlobInfoRes) Reset()         { *m = BlobInfoRes{} }
func (m *BlobInfoRes) String() string { return proto.CompactTextString(m) }
func (*BlobInfoRes) ProtoMessage()    {}
func (*BlobInfoRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{23}
}

func (m *BlobInfoRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlobInfoRes.Unmarshal(m, b)
}
func (m *BlobInfoRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlobInfoRes.Marshal(b, m, deterministic)
}
func (m *BlobInfoRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlobInfoRes.Merge(m, src)
}
func (m *BlobInfoRes) XXX_Size() int {
	return xxx_messageInfo_BlobInfoRes.Size(m)
}
func (m *BlobInfoRes) XXX_DiscardUnknown() {
	xxx_messageInfo_BlobInfoRes.DiscardUnknown(m)
}

var xxx_messageInfo_BlobInfoRes proto.InternalMessageInfo

func (m *BlobInfoRes) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *BlobInfoRes) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *BlobInfoRes) GetImportHeight() uint32 {
	if m != nil {
		return m.ImportHeight
	}
	return 0
}

func (m *BlobInfoRes) GetHasBlob() bool {
	if m != nil {
		return m.HasBlob
	}
	return false
}

func (m *BlobInfoRes) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *BlobInfoRes) GetMerkleRoot() []byte {
	if m != nil {
		return m.MerkleRoot
	}
	return nil
}

func (m *BlobInfoRes) GetReservedRoot() []byte {
	if m != nil {
		return m.ReservedRoot
	}
	return nil
}

func (m *BlobInfoRes) GetReceivedAt() uint64 {
	if m != nil {
		return m.ReceivedAt
	}
	return 0
}

func (m *BlobInfoRes) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type ListBlobInfoReq struct {
	Start                string   `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListBlobInfoReq) Reset()         { *m = ListBlobInfoReq{} }
func (m *ListBlobInfoReq) String() string { return proto.CompactTextString(m) }
func (*ListBlobInfoReq) ProtoMessage()    {}
func (*ListBlobInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{24}
}

func (m *ListBlobInfoReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListBlobInfoReq.Unmarshal(m, b)
}
func (m *ListBlobInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListBlobInfoReq.Marshal(b, m, deterministic)
}
func (m *ListBlobInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListBlobInfoReq.Merge(m, src)
}
func (m *ListBlobInfoReq) XXX_Size() int {
	return xxx_messageInfo_ListBlobInfoReq.Size(m)
}
func (m *ListBlobInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ListBlobInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_ListBlobInfoReq proto.InternalMessageInfo

func (m *ListBlobInfoReq) GetStart() string {
	if m != nil {
		return m.Start
	}
	return ""
}

type SendUpdateReq struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendUpdateReq) Reset()         { *m = SendUpdateReq{} }
func (m *SendUpdateReq) String() string { return proto.CompactTextString(m) }
func (*SendUpdateReq) ProtoMessage()    {}
func (*SendUpdateReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{25}
}

func (m *SendUpdateReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendUpdateReq.Unmarshal(m, b)
}
func (m *SendUpdateReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendUpdateReq.Marshal(b, m, deterministic)
}
func (m *SendUpdateReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendUpdateReq.Merge(m, src)
}
func (m *SendUpdateReq) XXX_Size() int {
	return xxx_messageInfo_SendUpdateReq.Size(m)
}
func (m *SendUpdateReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SendUpdateReq.DiscardUnknown(m)
}

var xxx_messageInfo_SendUpdateReq proto.InternalMessageInfo

func (m *SendUpdateReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type SendUpdateRes struct {
	RecipientCount       uint32   `protobuf:"varint,1,opt,name=recipientCount,proto3" json:"recipientCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendUpdateRes) Reset()         { *m = SendUpdateRes{} }
func (m *SendUpdateRes) String() string { return proto.CompactTextString(m) }
func (*SendUpdateRes) ProtoMessage()    {}
func (*SendUpdateRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{26}
}

func (m *SendUpdateRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SendUpdateRes.Unmarshal(m, b)
}
func (m *SendUpdateRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SendUpdateRes.Marshal(b, m, deterministic)
}
func (m *SendUpdateRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendUpdateRes.Merge(m, src)
}
func (m *SendUpdateRes) XXX_Size() int {
	return xxx_messageInfo_SendUpdateRes.Size(m)
}
func (m *SendUpdateRes) XXX_DiscardUnknown() {
	xxx_messageInfo_SendUpdateRes.DiscardUnknown(m)
}

var xxx_messageInfo_SendUpdateRes proto.InternalMessageInfo

func (m *SendUpdateRes) GetRecipientCount() uint32 {
	if m != nil {
		return m.RecipientCount
	}
	return 0
}

type CountHeadersRes struct {
	Count                uint32   `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CountHeadersRes) Reset()         { *m = CountHeadersRes{} }
func (m *CountHeadersRes) String() string { return proto.CompactTextString(m) }
func (*CountHeadersRes) ProtoMessage()    {}
func (*CountHeadersRes) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{27}
}

func (m *CountHeadersRes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CountHeadersRes.Unmarshal(m, b)
}
func (m *CountHeadersRes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CountHeadersRes.Marshal(b, m, deterministic)
}
func (m *CountHeadersRes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CountHeadersRes.Merge(m, src)
}
func (m *CountHeadersRes) XXX_Size() int {
	return xxx_messageInfo_CountHeadersRes.Size(m)
}
func (m *CountHeadersRes) XXX_DiscardUnknown() {
	xxx_messageInfo_CountHeadersRes.DiscardUnknown(m)
}

var xxx_messageInfo_CountHeadersRes proto.InternalMessageInfo

func (m *CountHeadersRes) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterEnum("QueryPeersRes_PeerState", QueryPeersRes_PeerState_name, QueryPeersRes_PeerState_value)
	proto.RegisterType((*GetStatusRes)(nil), "GetStatusRes")
	proto.RegisterType((*GetConfigRes)(nil), "GetConfigRes")
	proto.RegisterType((*GetNamesReq)(nil), "GetNamesReq")
	proto.RegisterType((*GetNamesRes)(nil), "GetNamesRes")
	proto.RegisterType((*AddPeerReq)(nil), "AddPeerReq")
	proto.RegisterType((*UnbanPeerReq)(nil), "UnbanPeerReq")
	proto.RegisterType((*BanPeerReq)(nil), "BanPeerReq")
	proto.RegisterType((*QueryPeersReq)(nil), "QueryPeersReq")
	proto.RegisterType((*QueryPeersRes)(nil), "QueryPeersRes")
	proto.RegisterType((*CheckoutReq)(nil), "CheckoutReq")
	proto.RegisterType((*CheckoutRes)(nil), "CheckoutRes")
	proto.RegisterType((*WriteReq)(nil), "WriteReq")
	proto.RegisterType((*TruncateReq)(nil), "TruncateReq")
	proto.RegisterType((*TruncateRes)(nil), "TruncateRes")
	proto.RegisterType((*PreCommitReq)(nil), "PreCommitReq")
	proto.RegisterType((*PreCommitRes)(nil), "PreCommitRes")
	proto.RegisterType((*CommitReq)(nil), "CommitReq")
	proto.RegisterType((*CommitRes)(nil), "CommitRes")
	proto.RegisterType((*ReadReq)(nil), "ReadReq")
	proto.RegisterType((*ReadRes)(nil), "ReadRes")
	proto.RegisterType((*ReadAtReq)(nil), "ReadAtReq")
	proto.RegisterType((*ReadAtRes)(nil), "ReadAtRes")
	proto.RegisterType((*BlobInfoReq)(nil), "BlobInfoReq")
	proto.RegisterType((*BlobInfoRes)(nil), "BlobInfoRes")
	proto.RegisterType((*ListBlobInfoReq)(nil), "ListBlobInfoReq")
	proto.RegisterType((*SendUpdateReq)(nil), "SendUpdateReq")
	proto.RegisterType((*SendUpdateRes)(nil), "SendUpdateRes")
	proto.RegisterType((*CountHeadersRes)(nil), "CountHeadersRes")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 1050 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x4b, 0x6f, 0xdb, 0x46,
	0x10, 0x2e, 0x65, 0xbd, 0x38, 0x22, 0x5d, 0x61, 0x51, 0x04, 0x82, 0xda, 0xa6, 0xce, 0x36, 0x48,
	0x9d, 0x22, 0xd8, 0x18, 0xee, 0xa1, 0x29, 0x50, 0xa0, 0xb0, 0x24, 0x23, 0x71, 0x1f, 0x8e, 0xbb,
	0x76, 0x50, 0xa0, 0x37, 0x8a, 0x1c, 0xdb, 0x44, 0x24, 0x52, 0xd9, 0x5d, 0x1a, 0xf6, 0xb9, 0x87,
	0x5e, 0xfa, 0x17, 0xfa, 0x5f, 0x8b, 0x5d, 0xbe, 0x96, 0x8a, 0x19, 0x14, 0xb9, 0xcd, 0x7c, 0xf3,
	0x5a, 0xee, 0x7c, 0x3b, 0x43, 0x70, 0x83, 0x4d, 0xcc, 0x36, 0x22, 0x55, 0xe9, 0xf4, 0xf3, 0xab,
	0x34, 0xbd, 0x5a, 0xe1, 0x73, 0xa3, 0x2d, 0xb3, 0xcb, 0xe7, 0xb8, 0xde, 0xa8, 0xbb, 0xdc, 0x48,
	0x6f, 0xc1, 0x7b, 0x89, 0xea, 0x5c, 0x05, 0x2a, 0x93, 0x1c, 0x25, 0x79, 0x00, 0xfd, 0x0d, 0xa2,
	0x38, 0x59, 0x4c, 0x9c, 0x3d, 0x67, 0xdf, 0xe3, 0x85, 0x46, 0xbe, 0x00, 0x57, 0x4b, 0xf3, 0x34,
	0x4b, 0xd4, 0xa4, 0xb3, 0xe7, 0xec, 0xf7, 0x78, 0x0d, 0x90, 0x09, 0x0c, 0x96, 0x77, 0x0a, 0xe5,
	0xc5, 0xed, 0x64, 0x67, 0xcf, 0xd9, 0xef, 0xf2, 0x52, 0xad, 0x2c, 0xfc, 0x76, 0xd2, 0xb5, 0x2c,
	0xfc, 0x96, 0x3e, 0x36, 0x95, 0xe7, 0x69, 0x72, 0x19, 0x5f, 0xe9, 0xca, 0x9f, 0x41, 0xef, 0x26,
	0x58, 0x65, 0x58, 0x14, 0xce, 0x15, 0xfa, 0x03, 0x8c, 0x5e, 0xa2, 0x3a, 0x0d, 0xd6, 0x28, 0x39,
	0xbe, 0xd3, 0x4e, 0x52, 0x05, 0x42, 0x19, 0x27, 0x97, 0xe7, 0x8a, 0x46, 0xc3, 0xea, 0x60, 0x3e,
	0xcf, 0x15, 0xfa, 0x93, 0x1d, 0x2a, 0x09, 0x81, 0x6e, 0x12, 0xac, 0xb1, 0x88, 0x34, 0xb2, 0xf9,
	0xaa, 0x6c, 0xb9, 0x8a, 0xc3, 0x5f, 0xf0, 0xce, 0x04, 0x7b, 0xbc, 0x06, 0xe8, 0x0b, 0x80, 0xa3,
	0x28, 0x3a, 0x43, 0x14, 0xba, 0x74, 0xdb, 0xcd, 0x10, 0xe8, 0x06, 0x51, 0x24, 0x4c, 0xb8, 0xcb,
	0x8d, 0x4c, 0x1f, 0x82, 0xf7, 0x26, 0x59, 0x06, 0x49, 0x19, 0xbb, 0x0b, 0x9d, 0x78, 0x53, 0xc4,
	0x75, 0xe2, 0x0d, 0xfd, 0x11, 0x60, 0xd6, 0x6a, 0x25, 0x0f, 0x01, 0xa2, 0x4c, 0x04, 0x2a, 0x4e,
	0x93, 0xdf, 0xce, 0x4d, 0xde, 0x1d, 0x6e, 0x21, 0xf4, 0x6f, 0x07, 0xfc, 0xdf, 0x33, 0x14, 0x77,
	0x3a, 0x81, 0xb9, 0x96, 0x6f, 0x61, 0x1c, 0x27, 0xe1, 0x2a, 0x8b, 0x70, 0x9e, 0x26, 0x09, 0x86,
	0x0a, 0x23, 0x93, 0x6f, 0xc8, 0xdf, 0xc3, 0xc9, 0x63, 0xf0, 0x0b, 0xec, 0x5c, 0xa5, 0x02, 0x23,
	0x53, 0x60, 0xc8, 0x9b, 0xa0, 0xe5, 0x35, 0x0b, 0x92, 0x04, 0x23, 0xd3, 0xd7, 0xda, 0x2b, 0x07,
	0xe9, 0x5f, 0x9d, 0xe6, 0x49, 0xda, 0xf9, 0x93, 0x7f, 0x63, 0xa7, 0xfa, 0x46, 0x02, 0xdd, 0x4d,
	0x2a, 0x94, 0x49, 0xeb, 0x73, 0x23, 0x13, 0x66, 0x9a, 0xab, 0xd0, 0x30, 0x65, 0xf7, 0x70, 0xc2,
	0x1a, 0xa9, 0x99, 0x16, 0x34, 0x51, 0x91, 0xe7, 0x6e, 0xba, 0xd6, 0x32, 0x3f, 0x5c, 0xcf, 0x1c,
	0xae, 0xd0, 0x74, 0x57, 0x05, 0x86, 0x37, 0x33, 0x4d, 0xb4, 0x49, 0xdf, 0xb0, 0xae, 0x06, 0xb4,
	0x55, 0x62, 0xa2, 0x72, 0xeb, 0x20, 0xb7, 0x56, 0x00, 0x3d, 0x04, 0xb7, 0xaa, 0x43, 0x7c, 0x70,
	0xe7, 0xaf, 0x4f, 0x4f, 0x8f, 0xe7, 0x17, 0xc7, 0x8b, 0xf1, 0x27, 0x04, 0xa0, 0x7f, 0x7e, 0xf1,
	0x9a, 0x1f, 0x2f, 0xc6, 0x8e, 0x96, 0x67, 0x47, 0xa7, 0xa7, 0xc7, 0x8b, 0x71, 0x87, 0x3e, 0x82,
	0xd1, 0xfc, 0x1a, 0xc3, 0xb7, 0x69, 0xa6, 0x74, 0x33, 0xee, 0x21, 0x5a, 0xd3, 0xc5, 0x70, 0x51,
	0xdd, 0x16, 0x77, 0xe4, 0x73, 0x23, 0xd3, 0x9f, 0x61, 0xf8, 0x87, 0x88, 0x15, 0x16, 0x29, 0xb6,
	0xed, 0xfa, 0x6b, 0xd3, 0xcb, 0x4b, 0x89, 0x25, 0xcb, 0x0b, 0x4d, 0xfb, 0x46, 0x81, 0x0a, 0xcc,
	0x4d, 0x7a, 0xdc, 0xc8, 0xba, 0xdc, 0x85, 0xc8, 0x92, 0x30, 0x68, 0x4d, 0x47, 0x7d, 0xdb, 0x45,
	0x52, 0x0a, 0xde, 0x99, 0xc0, 0x79, 0xba, 0x5e, 0xc7, 0xaa, 0x2d, 0x84, 0x35, 0x7c, 0xa4, 0xe6,
	0xe9, 0x1a, 0xc5, 0xdb, 0x15, 0xf2, 0x34, 0x55, 0x45, 0xbf, 0x2d, 0x84, 0xde, 0x81, 0xfb, 0xc1,
	0x84, 0xba, 0x15, 0x2a, 0x5e, 0xa3, 0x54, 0xc1, 0x3a, 0xe7, 0x46, 0x97, 0xd7, 0x80, 0x69, 0x54,
	0x7c, 0x95, 0x04, 0x2a, 0x13, 0x58, 0x7c, 0x5d, 0x0d, 0x68, 0xeb, 0x52, 0xa4, 0x41, 0x14, 0x06,
	0x52, 0x19, 0xc2, 0x0c, 0x79, 0x0d, 0xd0, 0x51, 0x5d, 0x5a, 0xd2, 0x2f, 0x61, 0xc0, 0x31, 0x88,
	0xda, 0x7a, 0x53, 0x99, 0x65, 0x75, 0x97, 0x8e, 0x75, 0x97, 0x27, 0xe0, 0x6a, 0xf3, 0x51, 0x5b,
	0x6f, 0x5b, 0x1b, 0x33, 0x86, 0x9d, 0x15, 0x26, 0x05, 0xc3, 0xb5, 0x48, 0xbf, 0xaa, 0x53, 0xdd,
	0x5f, 0xeb, 0x11, 0x8c, 0x66, 0xab, 0x74, 0x79, 0x92, 0x5c, 0xa6, 0x6d, 0xa7, 0xfd, 0xb7, 0x63,
	0xfb, 0x7c, 0xc4, 0x58, 0x23, 0x14, 0xbc, 0x78, 0xad, 0x1f, 0xdc, 0x2b, 0x8c, 0xaf, 0xae, 0xcb,
	0x27, 0xd8, 0xc0, 0xf4, 0xd8, 0xbe, 0x0e, 0xa4, 0xae, 0x53, 0xdc, 0x6d, 0xa9, 0x36, 0x7b, 0xd6,
	0xdb, 0xee, 0x59, 0x93, 0x12, 0xfd, 0x6d, 0x4a, 0xe8, 0xda, 0x02, 0x25, 0x8a, 0x1b, 0x8c, 0x8c,
	0xc7, 0xc0, 0x78, 0x34, 0x30, 0x9d, 0x43, 0x60, 0x88, 0xf1, 0x0d, 0x46, 0x47, 0x6a, 0x32, 0x34,
	0x25, 0x2c, 0xa4, 0xc9, 0x0b, 0x77, 0x8b, 0x17, 0xf4, 0x1b, 0xf8, 0xf4, 0xd7, 0x58, 0x2a, 0xfb,
	0x1a, 0xef, 0x5d, 0x1a, 0xf4, 0x6b, 0xf0, 0xcf, 0x31, 0x89, 0xde, 0x6c, 0xa2, 0xfa, 0x95, 0xbc,
	0x77, 0xdb, 0xdf, 0x37, 0x9d, 0x24, 0x79, 0x02, 0xbb, 0x02, 0xc3, 0x78, 0x13, 0x63, 0xa2, 0xf2,
	0x65, 0x98, 0x13, 0x7a, 0x0b, 0xd5, 0xc7, 0x30, 0xc2, 0x2b, 0x0c, 0xa2, 0x62, 0x34, 0x56, 0x5b,
	0xca, 0xb1, 0xb6, 0xd4, 0xe1, 0x3f, 0x7d, 0xe8, 0x2e, 0x16, 0xfc, 0x8c, 0x1c, 0x82, 0x5b, 0x6d,
	0x62, 0xf2, 0x80, 0xe5, 0x4b, 0x9b, 0x95, 0x4b, 0x9b, 0x1d, 0xeb, 0xa5, 0x3d, 0xf5, 0x59, 0x63,
	0x5b, 0xe7, 0x31, 0xf9, 0x0e, 0xfd, 0x70, 0x4c, 0xbd, 0x67, 0x19, 0x0c, 0x8a, 0xad, 0x46, 0x46,
	0xac, 0xde, 0x6f, 0xd3, 0x96, 0x70, 0x5d, 0xa3, 0xda, 0x65, 0xc4, 0x67, 0xf6, 0x5e, 0x6b, 0x8d,
	0x61, 0x30, 0x28, 0xf6, 0x1b, 0x19, 0xb1, 0xd9, 0xff, 0xf1, 0x87, 0x7a, 0xd6, 0x93, 0xdd, 0xc6,
	0xe0, 0x7f, 0x37, 0x6d, 0xea, 0xf2, 0xc0, 0x21, 0x4f, 0x60, 0x58, 0x8e, 0x53, 0xe2, 0x31, 0x6b,
	0xf8, 0x4e, 0x6d, 0x4d, 0x92, 0x67, 0xd0, 0x33, 0x33, 0x95, 0xb8, 0xac, 0x9c, 0xad, 0x6d, 0x67,
	0xd8, 0x77, 0xc8, 0x01, 0x0c, 0xcb, 0x91, 0x48, 0x3c, 0x66, 0x0d, 0xd0, 0xd6, 0x73, 0x3f, 0x05,
	0xb7, 0x9a, 0x88, 0xc4, 0x67, 0xf6, 0x04, 0x9d, 0x36, 0x54, 0x49, 0xf6, 0xa0, 0x5f, 0xf8, 0x01,
	0xab, 0x9d, 0x6a, 0x59, 0x2f, 0xa6, 0xae, 0x9e, 0x0e, 0x64, 0xc8, 0x8a, 0x69, 0x35, 0x2d, 0x25,
	0xfd, 0xc9, 0x7b, 0xd0, 0xcf, 0x67, 0x07, 0x01, 0x56, 0xcd, 0xa3, 0x69, 0x2d, 0x4b, 0xf2, 0xd4,
	0xfc, 0xef, 0x94, 0xc4, 0x27, 0x1e, 0xb3, 0xde, 0xc0, 0xd4, 0xd6, 0x24, 0x39, 0x00, 0xcf, 0x7e,
	0x24, 0x64, 0xcc, 0xb6, 0xde, 0x4c, 0xd3, 0xff, 0xc0, 0x21, 0x2f, 0xc0, 0xb3, 0xf9, 0xdc, 0x4a,
	0xb6, 0x31, 0xdb, 0xa6, 0xfd, 0x33, 0x80, 0xfa, 0x09, 0x91, 0x5d, 0xd6, 0x78, 0x74, 0xd3, 0xa6,
	0x2e, 0x67, 0xbd, 0x3f, 0x77, 0xc4, 0x26, 0x5c, 0xf6, 0x4d, 0xda, 0xef, 0xfe, 0x0b, 0x00, 0x00,
	0xff, 0xff, 0xad, 0xa9, 0xf6, 0x66, 0xc7, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DDRPClient is the client API for DDRP service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DDRPClient interface {
	GetStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetStatusRes, error)
	GetConfig(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetConfigRes, error)
	AddPeer(ctx context.Context, in *AddPeerReq, opts ...grpc.CallOption) (*empty.Empty, error)
	UnbanPeer(ctx context.Context, in *UnbanPeerReq, opts ...grpc.CallOption) (*empty.Empty, error)
	BanPeer(ctx context.Context, in *BanPeerReq, opts ...grpc.CallOption) (*empty.Empty, error)
	QueryPeers(ctx context.Context, in *QueryPeersReq, opts ...grpc.CallOption) (DDRP_QueryPeersClient, error)
	Checkout(ctx context.Context, in *CheckoutReq, opts ...grpc.CallOption) (*CheckoutRes, error)
	Write(ctx context.Context, opts ...grpc.CallOption) (DDRP_WriteClient, error)
	Truncate(ctx context.Context, in *TruncateReq, opts ...grpc.CallOption) (*empty.Empty, error)
	PreCommit(ctx context.Context, in *PreCommitReq, opts ...grpc.CallOption) (*PreCommitRes, error)
	Commit(ctx context.Context, in *CommitReq, opts ...grpc.CallOption) (*CommitRes, error)
	Read(ctx context.Context, in *ReadReq, opts ...grpc.CallOption) (DDRP_ReadClient, error)
	ReadAt(ctx context.Context, in *ReadAtReq, opts ...grpc.CallOption) (*ReadAtRes, error)
	GetBlobInfo(ctx context.Context, in *BlobInfoReq, opts ...grpc.CallOption) (*BlobInfoRes, error)
	ListBlobInfo(ctx context.Context, in *ListBlobInfoReq, opts ...grpc.CallOption) (DDRP_ListBlobInfoClient, error)
	CountHeaders(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CountHeadersRes, error)
	SendUpdate(ctx context.Context, in *SendUpdateReq, opts ...grpc.CallOption) (*SendUpdateRes, error)
}

type dDRPClient struct {
	cc *grpc.ClientConn
}

func NewDDRPClient(cc *grpc.ClientConn) DDRPClient {
	return &dDRPClient{cc}
}

func (c *dDRPClient) GetStatus(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetStatusRes, error) {
	out := new(GetStatusRes)
	err := c.cc.Invoke(ctx, "/DDRP/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDRPClient) GetConfig(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*GetConfigRes, error) {
	out := new(GetConfigRes)
	err := c.cc.Invoke(ctx, "/DDRP/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDRPClient) AddPeer(ctx context.Context, in *AddPeerReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/DDRP/AddPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDRPClient) UnbanPeer(ctx context.Context, in *UnbanPeerReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/DDRP/UnbanPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDRPClient) BanPeer(ctx context.Context, in *BanPeerReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/DDRP/BanPeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDRPClient) QueryPeers(ctx context.Context, in *QueryPeersReq, opts ...grpc.CallOption) (DDRP_QueryPeersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DDRP_serviceDesc.Streams[0], "/DDRP/QueryPeers", opts...)
	if err != nil {
		return nil, err
	}
	x := &dDRPQueryPeersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DDRP_QueryPeersClient interface {
	Recv() (*QueryPeersRes, error)
	grpc.ClientStream
}

type dDRPQueryPeersClient struct {
	grpc.ClientStream
}

func (x *dDRPQueryPeersClient) Recv() (*QueryPeersRes, error) {
	m := new(QueryPeersRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dDRPClient) Checkout(ctx context.Context, in *CheckoutReq, opts ...grpc.CallOption) (*CheckoutRes, error) {
	out := new(CheckoutRes)
	err := c.cc.Invoke(ctx, "/DDRP/Checkout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDRPClient) Write(ctx context.Context, opts ...grpc.CallOption) (DDRP_WriteClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DDRP_serviceDesc.Streams[1], "/DDRP/Write", opts...)
	if err != nil {
		return nil, err
	}
	x := &dDRPWriteClient{stream}
	return x, nil
}

type DDRP_WriteClient interface {
	Send(*WriteReq) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type dDRPWriteClient struct {
	grpc.ClientStream
}

func (x *dDRPWriteClient) Send(m *WriteReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dDRPWriteClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dDRPClient) Truncate(ctx context.Context, in *TruncateReq, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/DDRP/Truncate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDRPClient) PreCommit(ctx context.Context, in *PreCommitReq, opts ...grpc.CallOption) (*PreCommitRes, error) {
	out := new(PreCommitRes)
	err := c.cc.Invoke(ctx, "/DDRP/PreCommit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDRPClient) Commit(ctx context.Context, in *CommitReq, opts ...grpc.CallOption) (*CommitRes, error) {
	out := new(CommitRes)
	err := c.cc.Invoke(ctx, "/DDRP/Commit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDRPClient) Read(ctx context.Context, in *ReadReq, opts ...grpc.CallOption) (DDRP_ReadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DDRP_serviceDesc.Streams[2], "/DDRP/Read", opts...)
	if err != nil {
		return nil, err
	}
	x := &dDRPReadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DDRP_ReadClient interface {
	Recv() (*ReadRes, error)
	grpc.ClientStream
}

type dDRPReadClient struct {
	grpc.ClientStream
}

func (x *dDRPReadClient) Recv() (*ReadRes, error) {
	m := new(ReadRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dDRPClient) ReadAt(ctx context.Context, in *ReadAtReq, opts ...grpc.CallOption) (*ReadAtRes, error) {
	out := new(ReadAtRes)
	err := c.cc.Invoke(ctx, "/DDRP/ReadAt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDRPClient) GetBlobInfo(ctx context.Context, in *BlobInfoReq, opts ...grpc.CallOption) (*BlobInfoRes, error) {
	out := new(BlobInfoRes)
	err := c.cc.Invoke(ctx, "/DDRP/GetBlobInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDRPClient) ListBlobInfo(ctx context.Context, in *ListBlobInfoReq, opts ...grpc.CallOption) (DDRP_ListBlobInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DDRP_serviceDesc.Streams[3], "/DDRP/ListBlobInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &dDRPListBlobInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DDRP_ListBlobInfoClient interface {
	Recv() (*BlobInfoRes, error)
	grpc.ClientStream
}

type dDRPListBlobInfoClient struct {
	grpc.ClientStream
}

func (x *dDRPListBlobInfoClient) Recv() (*BlobInfoRes, error) {
	m := new(BlobInfoRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dDRPClient) CountHeaders(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*CountHeadersRes, error) {
	out := new(CountHeadersRes)
	err := c.cc.Invoke(ctx, "/DDRP/CountHeaders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dDRPClient) SendUpdate(ctx context.Context, in *SendUpdateReq, opts ...grpc.CallOption) (*SendUpdateRes, error) {
	out := new(SendUpdateRes)
	err := c.cc.Invoke(ctx, "/DDRP/SendUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DDRPServer is the server API for DDRP service.
type DDRPServer interface {
	GetStatus(context.Context, *empty.Empty) (*GetStatusRes, error)
	GetConfig(context.Context, *empty.Empty) (*GetConfigRes, error)
	AddPeer(context.Context, *AddPeerReq) (*empty.Empty, error)
	UnbanPeer(context.Context, *UnbanPeerReq) (*empty.Empty, error)
	BanPeer(context.Context, *BanPeerReq) (*empty.Empty, error)
	QueryPeers(*QueryPeersReq, DDRP_QueryPeersServer) error
	Checkout(context.Context, *CheckoutReq) (*CheckoutRes, error)
	Write(DDRP_WriteServer) error
	Truncate(context.Context, *TruncateReq) (*empty.Empty, error)
	PreCommit(context.Context, *PreCommitReq) (*PreCommitRes, error)
	Commit(context.Context, *CommitReq) (*CommitRes, error)
	Read(*ReadReq, DDRP_ReadServer) error
	ReadAt(context.Context, *ReadAtReq) (*ReadAtRes, error)
	GetBlobInfo(context.Context, *BlobInfoReq) (*BlobInfoRes, error)
	ListBlobInfo(*ListBlobInfoReq, DDRP_ListBlobInfoServer) error
	CountHeaders(context.Context, *empty.Empty) (*CountHeadersRes, error)
	SendUpdate(context.Context, *SendUpdateReq) (*SendUpdateRes, error)
}

func RegisterDDRPServer(s *grpc.Server, srv DDRPServer) {
	s.RegisterService(&_DDRP_serviceDesc, srv)
}

func _DDRP_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDRPServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DDRP/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDRPServer).GetStatus(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDRP_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDRPServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DDRP/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDRPServer).GetConfig(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDRP_AddPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPeerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDRPServer).AddPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DDRP/AddPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDRPServer).AddPeer(ctx, req.(*AddPeerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDRP_UnbanPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnbanPeerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDRPServer).UnbanPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DDRP/UnbanPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDRPServer).UnbanPeer(ctx, req.(*UnbanPeerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDRP_BanPeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BanPeerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDRPServer).BanPeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DDRP/BanPeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDRPServer).BanPeer(ctx, req.(*BanPeerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDRP_QueryPeers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryPeersReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DDRPServer).QueryPeers(m, &dDRPQueryPeersServer{stream})
}

type DDRP_QueryPeersServer interface {
	Send(*QueryPeersRes) error
	grpc.ServerStream
}

type dDRPQueryPeersServer struct {
	grpc.ServerStream
}

func (x *dDRPQueryPeersServer) Send(m *QueryPeersRes) error {
	return x.ServerStream.SendMsg(m)
}

func _DDRP_Checkout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDRPServer).Checkout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DDRP/Checkout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDRPServer).Checkout(ctx, req.(*CheckoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDRP_Write_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DDRPServer).Write(&dDRPWriteServer{stream})
}

type DDRP_WriteServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*WriteReq, error)
	grpc.ServerStream
}

type dDRPWriteServer struct {
	grpc.ServerStream
}

func (x *dDRPWriteServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dDRPWriteServer) Recv() (*WriteReq, error) {
	m := new(WriteReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DDRP_Truncate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TruncateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDRPServer).Truncate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DDRP/Truncate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDRPServer).Truncate(ctx, req.(*TruncateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDRP_PreCommit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreCommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDRPServer).PreCommit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DDRP/PreCommit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDRPServer).PreCommit(ctx, req.(*PreCommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDRP_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDRPServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DDRP/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDRPServer).Commit(ctx, req.(*CommitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDRP_Read_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReadReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DDRPServer).Read(m, &dDRPReadServer{stream})
}

type DDRP_ReadServer interface {
	Send(*ReadRes) error
	grpc.ServerStream
}

type dDRPReadServer struct {
	grpc.ServerStream
}

func (x *dDRPReadServer) Send(m *ReadRes) error {
	return x.ServerStream.SendMsg(m)
}

func _DDRP_ReadAt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAtReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDRPServer).ReadAt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DDRP/ReadAt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDRPServer).ReadAt(ctx, req.(*ReadAtReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDRP_GetBlobInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlobInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDRPServer).GetBlobInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DDRP/GetBlobInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDRPServer).GetBlobInfo(ctx, req.(*BlobInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDRP_ListBlobInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListBlobInfoReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DDRPServer).ListBlobInfo(m, &dDRPListBlobInfoServer{stream})
}

type DDRP_ListBlobInfoServer interface {
	Send(*BlobInfoRes) error
	grpc.ServerStream
}

type dDRPListBlobInfoServer struct {
	grpc.ServerStream
}

func (x *dDRPListBlobInfoServer) Send(m *BlobInfoRes) error {
	return x.ServerStream.SendMsg(m)
}

func _DDRP_CountHeaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDRPServer).CountHeaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DDRP/CountHeaders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDRPServer).CountHeaders(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DDRP_SendUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DDRPServer).SendUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DDRP/SendUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DDRPServer).SendUpdate(ctx, req.(*SendUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _DDRP_serviceDesc = grpc.ServiceDesc{
	ServiceName: "DDRP",
	HandlerType: (*DDRPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _DDRP_GetStatus_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _DDRP_GetConfig_Handler,
		},
		{
			MethodName: "AddPeer",
			Handler:    _DDRP_AddPeer_Handler,
		},
		{
			MethodName: "UnbanPeer",
			Handler:    _DDRP_UnbanPeer_Handler,
		},
		{
			MethodName: "BanPeer",
			Handler:    _DDRP_BanPeer_Handler,
		},
		{
			MethodName: "Checkout",
			Handler:    _DDRP_Checkout_Handler,
		},
		{
			MethodName: "Truncate",
			Handler:    _DDRP_Truncate_Handler,
		},
		{
			MethodName: "PreCommit",
			Handler:    _DDRP_PreCommit_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _DDRP_Commit_Handler,
		},
		{
			MethodName: "ReadAt",
			Handler:    _DDRP_ReadAt_Handler,
		},
		{
			MethodName: "GetBlobInfo",
			Handler:    _DDRP_GetBlobInfo_Handler,
		},
		{
			MethodName: "CountHeaders",
			Handler:    _DDRP_CountHeaders_Handler,
		},
		{
			MethodName: "SendUpdate",
			Handler:    _DDRP_SendUpdate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "QueryPeers",
			Handler:       _DDRP_QueryPeers_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Write",
			Handler:       _DDRP_Write_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Read",
			Handler:       _DDRP_Read_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListBlobInfo",
			Handler:       _DDRP_ListBlobInfo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}
